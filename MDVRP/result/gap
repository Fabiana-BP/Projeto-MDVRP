
FRAC_MAX_DISTRIBUTION = 100.0 # fração máxima de distribuição de clientes entre depósitos
SIZE_POP = 20  # população inicial
SIZE_DESC = 5  # número de descendentes
PROB_MUTATION = 0.2
PROB_LS_POP = 0.8  # probabilidade de busca local na formação da população
PROB_LS = 0.9  # probabilidade busca local
PROB_LS_BEST = 0.7  # probabilidade busca local considerando o melhor movimento
GEN = 60  # número de gerações
GEN_NO_EVOL = 15  # número permitido de gerações sem mudanças
SP = 2  # pressão seletiva para linear ranking
N_REPETITIONS = 10
TIME_TOTAL = 60

n = max(2,round(0.8*lenght)) # busca local
p = max(round(config.SIZE_POP * 0.1),1) # o melhor mais 10% da população para busca local após geração de descendentes
fixIndividuals = max(2,round(0.1*config.SIZE_POP)) # definir sobreviventes - de forma aleatória, fixa 10% dos melhores e escolhe os demais de forma aleatória.
____
p01
gap médio: 8.307849479925377 
 gap melhor: 4.817696992129474 
 custo médio: 624.7954912948455 
 melhor custo: 604.6618486384973 
 tempo médio: 2.9075583370526634

_____________
p02
gap médio: 8.156672718873244 
 gap melhor: 3.4971746042453185 
 custo médio: 512.1542923256804 
 melhor custo: 490.09017090348283 
 tempo médio: 6.822780363559723
 
_____________
p03
gap médio: 9.197062942743377 
 gap melhor: 4.58369224576722 
 custo médio: 700.1606478825763 
 melhor custo: 670.5801763106349 
 tempo médio: 16.751745388507842

 
 _____________
 p16
 gap médio: 123.26949928642841
 gap melhor: 110.38580344879718
 custo médio: 5743.0050414952975 
 melhor custo: 5411.606752050996
 tempo médio: 61.61659239967664

______________
p23
gap médio: 190.2604414230902 
 gap melhor: 185.17596034861415 
 custo médio: 17644.206583006096 
 melhor custo: 17335.13368969138 
 tempo médio: 68.20300275206566

